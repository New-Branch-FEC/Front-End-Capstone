"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpackage_json"] = self["webpackChunkpackage_json"] || []).push([["client_components_Related-items-and-comparisons_Comparison_jsx"],{

/***/ "./client/components/Related-items-and-comparisons/Comparison.jsx":
/*!************************************************************************!*\
  !*** ./client/components/Related-items-and-comparisons/Comparison.jsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n\n\n\n\nconst Comparison = props => {\n  if (props.cardProductFeatures?.features === undefined || props.currentProduct?.features === undefined) {\n    //console.log(\"The featues needed to take a second to load here\")\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, \"Loading Card Product Features\");\n  }\n\n  let tableRows = []; // create an object that will populate three separate columns in the grid: a boolean value for the presence or absence of a checkmark, and the value of the feature that populates the middle column\n  // this if conditional ensures that we iterate over the called cardProduct'd array instead of the default in App.js (which is a string)\n\n  if (Array.isArray(props.cardProductFeatures?.features)) {\n    // this for-loop captures both shared features, and features that are only in current product (the else statement). We also have a nested conditional to render the name of the product if it's value is set to null.\n    for (let i = 0; i < props.cardProductFeatures.features?.length; i++) {\n      let rowObj = {};\n\n      if (props.cardProductFeatures.features[i]?.value === props.currentProduct.features[i]?.value) {\n        if (props.cardProductFeatures.features[i]?.value === null) {\n          rowObj.featureName = props.cardProductFeatures.features[i]?.feature;\n        } else {\n          rowObj.featureName = props.cardProductFeatures.features[i]?.value;\n        }\n\n        rowObj.doesCurrentProductHaveFeature = true;\n        rowObj.doesCardProductHaveFeature = true;\n        tableRows.push(rowObj);\n      } else if (props.cardProductFeatures.features[i]?.value !== props.currentProduct.features[i]?.value) {\n        if (props.cardProductFeatures.features[i]?.value === null) {\n          rowObj.featureName = props.cardProductFeatures.features[i]?.feature;\n        } else {\n          rowObj.featureName = props.cardProductFeatures.features[i]?.value;\n        }\n\n        rowObj.doesCurrentProductHaveFeature = false;\n        rowObj.doesCardProductHaveFeature = true;\n        tableRows.push(rowObj);\n      } // console.log(\"tableRows[i].featureName\", tableRows[0].featureName)\n\n    } // this second for-loop captures any features that are not shared with the card product\n\n\n    for (let i = 0; i < props.currentProduct.features?.length; i++) {\n      let rowObj = {};\n\n      if (!tableRows[i].featureName?.includes(props.currentProduct.features[i]?.value)) {\n        // console.log(\"rowObj.featureName in the 2nd for-loop\", rowObj.featureName)\n        if (props.currentProduct.features[i]?.value === null) {\n          rowObj.featureName = props.currentProduct.features[i]?.feature;\n        } else {\n          rowObj.featureName = props.currentProduct.features[i]?.value;\n        }\n\n        rowObj.featureName = props.currentProduct.features[i]?.value;\n        rowObj.doesCurrentProductHaveFeature = true;\n        rowObj.doesCardProductHaveFeature = false;\n        tableRows.push(rowObj);\n      }\n    }\n  }\n  /*\n  Example of what data should look like in tableRows:\n    [\n      {\n        featureName: \"100% Cotton\",\n        doesCurrentProductHaveFeature: false,\n        doesCardProductHaveFeature: true,\n      }\n    ]\n    */\n\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.showModalStatus && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"comparison-modal-background\",\n    onClick: () => props.setShowModalStatus(prev => !prev)\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"comparison-modal-wrapper\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, \"COMPARING\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"comparison-modal-content\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"comparision-modal-header\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, props.currentProduct?.name), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, props.cardProductFeatures?.name)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"modal-grid\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, tableRows.map((element, i) => /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    key: i,\n    className: \"comparison-modal-grid-row\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"left-checkmark\"\n  }, element.doesCurrentProductHaveFeature && \"✓\"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"compared-characteristic\"\n  }, element.featureName), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n    className: \"right-checkmark\"\n  }, element.doesCardProductHaveFeature && \"✓\")))))))));\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Comparison); // TODO: How can I use useContext to grab the currentProduct from the App component???\n// GET request to https://app-hrsei-api.herokuapp.com/api/fec2/hr-rfe/products (make dynamic ID ':id')\n//   Current Product Name (endpoint must  match up with given ID (req.body.name):\n//   Current Product Characteristic (req.body.features) <- (this value is an array that must be iterated over with forEach):\n// setting current product by current product ID, with a default product upon load, \"Bright Future Sunglasses\"\n// const [cardProductFeatures, setCardProductFeatures] = useState(37312);\n// // getting current product by current product's id\n// useEffect(() => {\n//   axios.get(`/products/${cardProductFeatures}`)\n//     .then((res) => {\n//       // console.log('res: ', res); <-- working\n//       setCardProductFeatures(res.data)\n//     })\n//     .catch(err => {\n//       console.log(\"An error occured while fetching card item\", err);\n//     })\n// }, []);\n// console.log(\"This is card product features\", props.cardProductFeatures.features)\n// Upon click event, the user will see this comparison card, which takes the card's product and compares it to the currentProduct.\n//  {props.currentProduct.features[0].feature}: {props.currentProduct.features[0].value}\n//   {props.cardProductFeatures.features[0].feature}: {props.cardProductFeatures.features[0].value}\n// console.log(\"this is current product features\", props.currentProduct.features)\n// TODO: check for async error out and add a null placeholder for cardProductFeatures\n// iterate over the card's product characteristics, and the currentProduct's characteristics\n// if (cardProduct === null) {\n//   return <div>Loading Related Products</div>\n// }\n// const Comparison = (props) => {\n//   if (props.cardProductFeatures?.features === undefined || props.currentProduct?.features === undefined) {\n//     //console.log(\"The featues needed to take a second to load here\")\n//     return <div>Loading Card Product Features</div>\n//   }\n//   let tableRows = [];\n//   if(Array.isArray(props.cardProductFeatures?.features)) {\n//     for (let i = 0; i < props.cardProductFeatures.features?.length; i++) {\n//       // for (let j = 0; j < props.cardProductFeatures.features.length; j++) {\n//         if (props.cardProductFeatures.features[i]?.value === props.currentProduct.features[i]?.value) {\n//           //console.log(\"the if conditional is working\")\n//           tableRows.push(`✓   ${props.cardProductFeatures.features[i]?.value}   ✓`)\n//         } else if (props.cardProductFeatures.features[i]?.value !== props.currentProduct.features[i]?.value) {\n//           tableRows.push(`    ${props.cardProductFeatures.features[i]?.value}   ✓`)\n//           tableRows.push(`✓   ${props.currentProduct.features[i]?.value}    `)\n//         }\n//         // }\n//       }\n//       // console.log(\"tableRows\", tableRows) <-- this works\n//     }\n//     // If the characteristic is shared (If the compared product value === current product value)\n//     // render the item with a checkbox in the Compared Product Name column, and in the Current Product Name column\n//     // else if the characteristic NOT shared,\n//     // render it with its product checked (and the other unchecked)\n//       return (\n//         <>\n//       {props.showModalStatus ?\n//       <div className=\"comparison-modal-background\"onClick={() => props.setShowModalStatus(prev => !prev)} >\n//         <div className=\"comparison-modal-wrapper\">\n//         <div>COMPARING</div>\n//           <div className=\"comparison-modal-content\">\n//               <h4>{props.currentProduct?.name}           {props.cardProductFeatures?.name}</h4>\n//             <div className=\"modal-grid\">\n//               <div> {tableRows.map((element, i) => { return <ul key={i} >{element}</ul>})} </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div> : null}\n//     </>\n//   )\n// }\n// export default Comparison ;\n// TODO: How can I use useContext to grab the currentProduct from the App component???\n// GET request to https://app-hrsei-api.herokuapp.com/api/fec2/hr-rfe/products (make dynamic ID ':id')\n//   Current Product Name (endpoint must  match up with given ID (req.body.name):\n//   Current Product Characteristic (req.body.features) <- (this value is an array that must be iterated over with forEach):\n// setting current product by current product ID, with a default product upon load, \"Bright Future Sunglasses\"\n// const [cardProductFeatures, setCardProductFeatures] = useState(37312);\n// // getting current product by current product's id\n// useEffect(() => {\n//   axios.get(`/products/${cardProductFeatures}`)\n//     .then((res) => {\n//       // console.log('res: ', res); <-- working\n//       setCardProductFeatures(res.data)\n//     })\n//     .catch(err => {\n//       console.log(\"An error occured while fetching card item\", err);\n//     })\n// }, []);\n// console.log(\"This is card product features\", props.cardProductFeatures.features)\n// Upon click event, the user will see this comparison card, which takes the card's product and compares it to the currentProduct.\n//  {props.currentProduct.features[0].feature}: {props.currentProduct.features[0].value}\n//   {props.cardProductFeatures.features[0].feature}: {props.cardProductFeatures.features[0].value}\n// console.log(\"this is current product features\", props.currentProduct.features)\n// TODO: check for async error out and add a null placeholder for cardProductFeatures\n// iterate over the card's product characteristics, and the currentProduct's characteristics\n// if (cardProduct === null) {\n//   return <div>Loading Related Products</div>\n// }\n\n//# sourceURL=webpack://package.json/./client/components/Related-items-and-comparisons/Comparison.jsx?");

/***/ })

}]);